180*365
1500000/65700
1200000/65700
180*365*250
2/20
2/18
600/16000
quit()
0..1
0...1
for (i in seq(1,100)) {x[i]=rnorm()}
for (i in seq(1,100)) {x[i]=rnorm(1)}
x=c()
for (i in seq(1,100)) {x[i]=rnorm(1)}
print(mean(x))
x=c()
for (i in seq(1,100)) {x[i]=rnorm(1)}
print(mean(x))
if(x[1]<0){print("negative")}else {print("nonnegative")}
if(x[1]<0){print("negative")}else {print("nonnegative")}
x="abc"
x[3]
x
tickets=read.csv("Entete_CP32_2015_2.txt",sep=";",fileEncoding="UTF-8-BOM")
tickets$month=as.integer(substr(tickets$Date_cloture,6,7))
tickets$day=as.integer(substr(tickets$Date_cloture,9,10))
tickets$year=as.integer(substr(tickets$Date_cloture,1,2))
tickets=tickets[tickets$Total>0,] # ignore cancellations i.e. count the transactions anyway
valid_ids=tickets$idEntete[tickets$Total>0]
setwd("~/Courtepaille/CP2015")
tickets=read.csv("C:/Users/ALefevre/Documents/Courtepaille/CP2015/Entete_CP32_2015_2.txt",sep=";",fileEncoding="UTF-8-BOM")
tickets$month=as.integer(substr(tickets$Date_cloture,6,7))
tickets$day=as.integer(substr(tickets$Date_cloture,9,10))
tickets$year=as.integer(substr(tickets$Date_cloture,1,2))
tickets=tickets[tickets$Total>0,] # ignore cancellations i.e. count the transactions anyway
valid_ids=tickets$idEntete[tickets$Total>0]
m=matrix(nrow=2,ncol=3) # initialized with NA
attributes(m)
x=matrix(c(1,2,3,4,5,6,7,8,9),ncol=3,byrow=TRUE)
# byrow=TRUE means data is entered by rows first, like latin text
# byrow=FALSE means data is entered by columns first, like chinese text (default)
dim(m)=c(2,5) # changing the size of the matrix
dim(m)=c(1,6)
m
dim(m)=c(2,5)
dim(m)=c(1,6)
m
x=c(2,5)
rbind(x,x)
cbind(x,x)
c(x,x)
x=factor(c("chicken","chicken","egg","egg","chicken","egg"))
levels(x)
table(x)
sapply(x,length)
x
length("egg")
nchar("egg")
sapply(x,nchar)
x
sapply(names(x),nchar)
names()
names(x)
x
sapply(levels(x),nchar)
sapply(x,nchar)
x
unclass(x)
vector(x)
character(x)
x
airquality
names(airquality)
setwd("../../")
data=read.csv("hw1_data.csv")
data
names(data)
head(data)
dim(data)
tail(data)
data$Ozone[47]
sum(is.na(data$Oz))
mean(data$Oz)
sum(data$Oz[!is.na(data$Oz)])
mean(data$Oz[!is.na(data$Oz)])
data$Ozone>31
help(and)
?and
TRUE & FALSE
c(TRUE,TRUE) & c(TRUE, FALSE)
data$Ozone>31 & data$Temp>90
data[data$Ozone>31 & data$Temp>90,]
data$Solar.R[data$Ozone>31 & data$Temp>90,]
data$Solar.R[data$Ozone>31 & data$Temp>90]
x=data$Solar.R[data$Ozone>31 & data$Temp>90]
mean(x )
mean(x[!is.na(x)])
x=data$Temp[data$Month==6]
mean(x)
max(data$ozone[data$Mont==5])
x=data$ozone[data$Mont==5]
max(x[!is.na(x)])
x
x=data$ozone[data$Month==5]
x
x=data$Ozone[data$Month==5]
x
max(x)
max(x[!is.na(x)])
900/6
setwd("~/GitHub/ProgrammingAssignment2")
source('cachematrix.R')
x=matrix(c(0,1,1,0),nrows=2,ncols=2)
?matrix
x=matrix(c(0,1,1,0),nrow=2,ncol=2)
x
x=makeCacheMatrix(x)
solve(x)
x=matrix(c(0,-1,1,0),nrow=2,ncol=2)
solve(x)
x=matrix(c(0,2,1,0),nrow=2,ncol=2)
solve(x)
y=makeCacheMatrix(x)
source('cachematrix.R')
y=makeCacheMatrix(x)
source('cachematrix.R')
y=makeCacheMatrix(x)
y=makeCacheMatrix(x)
source('cachematrix.R')
y=makeCacheMatrix(x)
y
x
y=makeCacheMatrix(x)
source('cachematrix.R')
y=makeCacheMatrix(x)
y=makeCacheMatrix(x)
source('cachematrix.R')
y=makeCacheMatrix(x)
cacheSolve(y)
source('cachematrix.R')
y=makeCacheMatrix(x)
cacheSolve(y)
y
y$getinverse()
is.null(y$getinverse())
source('cachematrix.R')
y=makeCacheMatrix(x)
y$getinverse()
cacheSolve(y)
source('cachematrix.R')
y=makeCacheMatrix(x)
cacheSolve(y)
x$getinverse()
y$getinverse()
source('cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/test_cachematrix.R')
setwd("~/GitHub/ProgrammingAssignment2")
source('~/GitHub/ProgrammingAssignment2/test_cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/test_cachematrix.R')
cacheSolve(y)
cacheSolve(y)-ix
cacheSolve(y)
ix
source('~/GitHub/ProgrammingAssignment2/test_cachematrix.R')
cacheSolve(y)-ix
norm(cacheSolve(y)-ix)
source('~/GitHub/ProgrammingAssignment2/test_cachematrix.R')
